((5.5-2.4)/100)*19200
#works out to be a difference of 595.2 g of liver between gravid and no gravid
#Now if liver tissue has ED of 23.2 kJ/g:
max_HSI_diff <- 595.2*23.2 #13,808.64 kJ
print(max_HSI_diff/foet_total*100) #Difference accounts for X% of total reproductive costs.
}
#test
BioE_repro_HSI(DWinf = 130, k = 0.12, to = -3.25, Ma = 0.00003, Mb = 2.84915, Temp_env = 25.1, oxy = 14.140, Q10 = 2.435, Ra = 11.44,
Rb = -0.18, Temp_exp = 24, ACT = 1.5, Assim = 0.33)
#Apply BioE function to a list of parameters----
# constant parameters:
DWinf <- 130
to <- -3.25
k <- 0.12
Ma <- 0.00003
Mb <- 2.84915
Temp_exp <- 24 #24 #temperature Ra was derived at
DWinf_list <- rep(list(DWinf), 15)
to_list <- rep(list(to), 15)
k_list <- rep(list(k), 15)
Ma_list <- rep(list(Ma), 15)
Mb_list <- rep(list(Mb), 15)
Temp_exp_list <- rep(list(Temp_exp), 15)
# parameters to vary in the sensitivity analysis (7 parameters, vary each by +/- 25%, so 14 models total to check effect + original = 15 MODELS):
Temp_env <- 25.1
oxy <- 14.140 #kJ/g
Q10 <- 2.435
Ra <- 11.44  #(gO2/kg/d)
Rb <- -0.18
ACT <- 1.5
Assim <- 0.33
oxy_list <- list(oxy, oxy*1.25, oxy*0.75, oxy, oxy, oxy, oxy, oxy, oxy, oxy, oxy, oxy, oxy, oxy, oxy) #there must be a better way but out of time
Q10_list <- list(Q10, Q10, Q10, Q10*1.25, Q10*0.75, Q10, Q10, Q10, Q10, Q10, Q10, Q10, Q10, Q10, Q10)
Ra_list <- list(Ra, Ra, Ra, Ra, Ra, Ra*1.25, Ra*0.75, Ra, Ra, Ra, Ra, Ra, Ra, Ra, Ra)
Rb_list <- list(Rb, Rb, Rb, Rb, Rb, Rb, Rb, Rb*1.25, Rb*0.75, Rb, Rb, Rb, Rb, Rb, Rb)
Temp_env_list <- list(Temp_env, Temp_env, Temp_env, Temp_env, Temp_env, Temp_env, Temp_env, Temp_env, Temp_env,
Temp_env*1.25, Temp_env*0.75, Temp_env, Temp_env, Temp_env, Temp_env)
ACT_list <- list(ACT, ACT, ACT, ACT, ACT, ACT, ACT, ACT, ACT, ACT, ACT, ACT*1.25, ACT*0.75, ACT, ACT)
Assim_list <- list(Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim, Assim*1.25, Assim*0.75)
param_list <- list(DWinf_list, to_list, k_list, Ma_list, Mb_list, Temp_env_list, oxy_list, Q10_list, Ra_list, Rb_list,
Temp_exp_list, ACT_list, Assim_list)
#Run Model ----
param_model_list <- list()
for(i in 1:15){
param_model_list[[i]] <- list(DWinf_list[[i]], to_list[[i]], k_list[[i]], Ma_list[[i]], Mb_list[[i]], Temp_env_list[[i]], oxy_list[[i]],
Q10_list[[i]], Ra_list[[i]], Rb_list[[i]], Temp_exp_list[[i]], ACT_list[[i]], Assim_list[[i]])
print(i)
}
#Create for loop to run all models at once
model_outputs <- data.frame(matrix(ncol = 10, nrow = 15))
colnames(model_outputs) <- c("Lifetime Energy (MJ)", "Difference % (lifetime energy)", "Growth cost % (age 1)",
"Difference % (growth age 1)","Growth cost % (age 12)", "Difference % (growth age 12)",
"Annual Reproduction Cost %", "Difference % (annual reproduction cost)",
"Reproduction Cost (% liver stores)", "Difference % (reproductive use of liver stores)")
rownames(model_outputs) <- c("Control", "oxy + 25%", "oxy - 25%", "Q10 + 25%", "Q10 - 25%", "Ra + 25%", "Ra - 25%",
"Rb + 25%", "Rb - 25%", "Temperature + 25%","Temperature -25%", "ACT + 25%", "ACT - 25%",
"Assim + 25%", "Assim - 25%")
#calculate lifetime costs
for(i in 1:15){
model_outputs[i,1] <- pmap(param_model_list[[i]], BioE)
}
model_outputs$`Lifetime Energy (MJ)` <- model_outputs$`Lifetime Energy (MJ)`/1000
# Compare lifetime costs
for(i in 1:15){
model_outputs[i,2] <- model_outputs[i,1]/model_outputs[1,1]*100 - 100
}
#Calculate growth costs at age 1
for(i in 1:15){
model_outputs[i,3] <- pmap(param_model_list[[i]], BioE_grow1)
}
#Compare growth costs at age 1
for(i in 1:15){
model_outputs[i,4] <- model_outputs[i,3]/model_outputs[1,3]*100 - 100
}
#Calculate growth costs of adult
for(i in 1:15){
model_outputs[i,5] <- pmap(param_model_list[[i]], BioE_growAdult)
}
#Compare growth costs of adult
for(i in 1:15){
model_outputs[i,6] <- model_outputs[i,5]/model_outputs[1,5]*100 - 100
}
#Calculate repro costs as proportion of annual energy cost of mum
for(i in 1:15){
model_outputs[i,7] <- pmap(param_model_list[[i]], BioE_repro_annual)
}
#Compare repro costs as proportion of annual energy cost of mum
for(i in 1:15){
model_outputs[i,8] <- model_outputs[i,7]/model_outputs[1,7]*100 - 100
}
#Calculate repro costs as maximum difference in HSI
for(i in 1:15){
model_outputs[i,9] <- pmap(param_model_list[[i]], BioE_repro_HSI)
}
#Compare repro costs as maximum difference in HSI
for(i in 1:15){
model_outputs[i,10] <- model_outputs[i,9]/model_outputs[1,9]*100 - 100
}
write_csv(model_outputs, "Sensitivity Analysis 2 Outputs.csv")
View(model_outputs)
Q10*1.25
Q10*0.75
Rb*1.25
Rb*0.75
Rb
1-Rb
1+Rb
1+Rb*0.75
1+Rb*1.25
oxy*1.25
oxy*0.75
Ra*0.75
Ra*1.25
Temp_env*0.75
Temp_env*1.25
ACT*0.75
ACT*1.25
ACT
ACT*0.75-1
ACT*1.25-1
Assim
Assim*1.25
Assim*0.75
1-Assim
1-Assim*0.75
1-Assim*1.25
Q10*1.25
Q10*0.75
#Load packages ----
library(ggplot2)
#Load packages ----
library(ggplot2)
library(tidyverse)
library(mgcv)
#install.packages('corrplot')
library(corrplot)
#install.packages("mctest")
library(mctest)
#install.packages("car")
library(car)
library(ggpubr)
library(gtable)
library(gridExtra)
library(cowplot)
library(visreg)
library(patchwork)
library(svglite)
dat1 <- read.csv("Mobula_eregoodootenkee reproduction data- Latest update MBB_CL_CL EDITED COLUMNS.csv")
head(dat1)
str(dat1)
#clean up and look at adults (embryo HSI not measured):
HSI <- dat1
HSI <- HSI[,1:41]
HSI <- subset(HSI, H_S_I != 'NA') #https://stackoverflow.com/questions/6650510/remove-rows-from-data-frame-where-a-row-match-a-string/6650564
str(HSI)
HSI[,] <- lapply(HSI, function(x) if(is.factor(x)) factor(x) else x) #https://stackoverflow.com/questions/1195826/drop-factor-levels-in-a-subsetted-data-frame
str(HSI) #removes non-used factor levels
head(HSI)
boxplot(HSI$H_S_I)
range(HSI$H_S_I)
mean(HSI$H_S_I)
median(HSI$H_S_I)
mean(HSI$Total.mass..kg.) #17.13 kg
HSI$Disc.width..cm. <- as.numeric(as.character(HSI$Disc.width..cm.))
mean(HSI$Disc.width..cm.) #111.26 cm
summarise(HSI$Sex)
ggplot(HSI, aes(x=Stage, y = H_S_I)) + geom_boxplot() + theme_classic() +
labs(y = "HSI")
anova4 <- aov(H_S_I ~ Stage, data = HSI)
summary(anova4) #significant (note adult == male, all females are in the 4 other categories)
TukeyHSD(anova4) #only significant is adult and gravid, p = 0.0005
#should "mature ovulating" and "Maturing ovulating" be the same category? Don't think so.
aggregate(HSI[,"H_S_I"], list(HSI$Stage), mean) #https://stackoverflow.com/questions/21982987/mean-per-group-in-a-data-frame
dat1E <- HSI
dat1E <- dat1E %>% drop_na(Embryo.mass..kg.)
ggplot(dat1E, aes(x=Embryo.mass..kg., y = H_S_I)) + geom_point() +
geom_smooth(method = "lm", se = F, colour = "Black") + #https://stackoverflow.com/questions/42897269/remove-grey-background-confidence-interval-from-forecasting-plot
theme_classic() +
labs(x ="Embryo Mass (kg)", y = "HSI")
lm1 <- lm(dat1E$`H_S_I` ~ dat1E$`Embryo.mass..kg.`)
summary(lm1) #no sig relationship
#---
#Then make new column for relative embryo size to mother and compare that
#[update 13/8/19 - I don't know where this column went,the .csv file has gone weird]
ggplot(dat1E, aes(x=Relative.embryo.mass...., y = H_S_I)) + geom_point() + theme_classic() +
labs(y = "HSI")
lm2 <- lm(dat1E$H_S_I ~ dat1E$Relative.embryo.mass....)
summary(lm2) #no sig relationship
ggMF <- ggplot(HSI, aes(x=Sex, y = H_S_I)) + geom_boxplot() + theme_classic() +
labs(y = "HSI")
ggMF
anova3 <- aov(H_S_I ~ Sex, data = HSI)
summary(anova3)
TukeyHSD(anova3)
t.test(H_S_I ~ Sex, data = HSI) #significantly different p = 0.002423
dat1G <- HSI
dat1G <- dat1G %>% drop_na(Gravid)
ggGRAV <- ggplot(dat1G, aes(x=Gravid, y = H_S_I)) + geom_boxplot() + theme_classic() +
labs(y = "HSI")
ggGRAV
t.test(H_S_I ~ Gravid, data = dat1G) #sig, p < 0.01, no mean = 4.51, yes mean = 3.80
#-------Plot 3
#HSI v foetus mass
ggFOET <- ggplot(dat1E, aes(x=Embryo.mass..kg., y = H_S_I)) + geom_point() +
# geom_smooth(method = "lm", se = F, colour = "Black") + #https://stackoverflow.com/questions/42897269/remove-grey-background-confidence-interval-from-forecasting-plot
theme_classic() +
labs(x ="Embryo Mass (kg)", y = "HSI")
summary(lm(`H_S_I` ~ `Embryo.mass..kg.`, data = dat1E))
#13/12/19 USE PATCHWORK INSTEAD OF ARRANGEGROB, WAY EASIER ---
#Remake plots:
#Derive SE http://environmentalcomputing.net/plotting-with-ggplot-bar-plots-with-error-bars/
HSI_sex <- HSI %>%
group_by(Sex) %>%
summarise(mean_HSI = mean(H_S_I),
SE_HSI = sd(H_S_I)/sqrt(n()))
HSI_sex
#Reorder to it flows from male to female to then panel B gravid vs non-gravid
HSI_sex$Sex <- factor(HSI_sex$Sex, levels = c("Male", "Female"))
#plot 1:
p1 <- ggplot(HSI_sex, aes(x = Sex, y = mean_HSI)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean_HSI - SE_HSI, ymax = mean_HSI + SE_HSI), width = 0.4) +
scale_y_continuous(limits = c(0, 6), breaks = seq(0, 6, by = 1)) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black")) +
labs(y = "HSI (%)")
p1
#plot 2
HSI_gravid <- HSI %>%
drop_na(Gravid) %>%
group_by(Gravid) %>%
summarise(mean_HSI = mean(H_S_I),
SE_HSI = sd(H_S_I)/sqrt(n()))
#Quick aside:
#Determine difference in kJ of HSI between gravid and non-gravid females (mean diff, with mean mass of mothers 19.2kg)
HSI_gravid
HSI_Grav_dif <- as.numeric(HSI_gravid[1, 2] - HSI_gravid[2, 2])
HSI_Grav_dif
HSI_mass_dif <- (HSI_Grav_dif/100)*19200 #works out to be a difference of 137.2971 g of liver between gravid and no gravid
#Now if liver tissue has ED of 23.2 kJ/g:
HSI_mass_dif*23.2 #3185.3 kJ
#If total cost of repro on average is 20,222 kJ,
3185.3/20222*100
#But check maximum difference in HSI:
#min HSI for female (gravid) = 2.4%, max HSI for female (mature ovulating) = 5.5%
HSI_dif_max <- ((5.5-2.4)/100)*19200
HSI_dif_max*23.2
13808.64/20222*100
p2 <- ggplot(HSI_gravid, aes(x=Gravid, y = mean_HSI)) +
geom_point(size = 2)  +
geom_errorbar(aes(ymin = mean_HSI - SE_HSI, ymax = mean_HSI + SE_HSI), width = 0.4) +
scale_y_continuous(limits = c(0, 5.5), breaks = seq(0, 5.5, by = 1)) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black")) +
labs(y = "HSI (%)")
p2
#plot 3
#HSI v foetus mass
p3 <- ggplot(dat1E, aes(x=Embryo.mass..kg., y = H_S_I)) + geom_point() +
# geom_smooth(method = "lm", se = F, colour = "Black") + #https://stackoverflow.com/questions/42897269/remove-grey-background-confidence-interval-from-forecasting-plot
theme_classic() +
theme(axis.title.x = element_text(size = 2),
axis.title.y = element_text(size = 2),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black")) +
labs(x ="Foetus Mass (kg)", y = "HSI (%)")
p3
plot1 <- (p1 + p2)/p3 + plot_annotation(tag_levels = ("a"), tag_prefix = "(",
tag_suffix = ")")  &
theme_bw()
plot1
#---
#Quick check to see if season is significant for HSI
ggplot(HSI, aes(x=Season, y = H_S_I, colour = Sex)) + geom_boxplot() + theme_classic() +
labs(y = "HSI")
summary(aov(H_S_I~Season, dat = HSI)) #nope
p2 <- ggplot(HSI_gravid, aes(x=Gravid, y = mean_HSI)) +
geom_point(size = 2)  +
geom_errorbar(aes(ymin = mean_HSI - SE_HSI, ymax = mean_HSI + SE_HSI), width = 0.4) +
scale_y_continuous(limits = c(0, 5.5), breaks = seq(0, 5.5, by = 1)) +
theme(axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black")) +
labs(y = "HSI (%)")
p2
HSI_gravid
View(HSI)
View(dat1)
#UPDATE SUP MAT FIGURE SEASONAL COMPARISON 3 Nov 2021 ----
#make new dataframe with new column using existing df where male = "adult", female gravid = "gravid,
#..and all others (preovulating etc) are female non-gravid.
HSI_sup <- HSI
View(HSI_sup)
if_else(HSI_sup$Stage == "Adult",
HSI_sup$sup_fig <- "Male",
if_else(
HSI_sup$Stage == "Gravid",
HSI_sup$sup_fig <- "Female Gravid",
HSI_sup$sup_fig <- "Female Non-Gravid",
))
?if_else
ifelse(HSI_sup$Stage == "Adult",
HSI_sup$sup_fig <- "Male",
ifelse(
HSI_sup$Stage == "Gravid",
HSI_sup$sup_fig <- "Female Gravid",
HSI_sup$sup_fig <- "Female Non-Gravid",
))
if_else(HSI_sup$Stage == "Adult",
HSI_sup$sup_fig <- "Male",
if_else(
HSI_sup$Stage == "Gravid",
HSI_sup$sup_fig <- "Female Gravid",
HSI_sup$sup_fig <- "Female Non-Gravid",
))
for i in 1:(nrow(HSI_sup)){
if_else(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
if_else(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
print(i)
}
for i:(nrow(HSI_sup)){
if_else(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
if_else(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
print(i)
}
nrow(HSI_sup)
for(i:(nrow(HSI_sup))){
if_else(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
if_else(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
print(i)
}
if_else(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
if_else(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
for(i in 1:(nrow(HSI_sup))){
if_else(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
if_else(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
}
ifelse(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
ifelse(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
print(i)
for(i in 1:(nrow(HSI_sup))){
ifelse(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
ifelse(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
print(i)
}
for(i in 1:(nrow(HSI_sup))){
ifelse(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
ifelse(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid",
))
print(i)
}
?if()
?if
?ifelse
HSI_sup$Stage[1]
HSI_sup$Stage[3]
for(i in 1:(nrow(HSI_sup))){
if(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
if(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
else(HSI_sup$sup_fig[i] <- "Female Non-Gravid")
))
print(i)
}
?else if
?elseif
?else
?if
for(i in 1:(nrow(HSI_sup))){
ifelse(HSI_sup$Stage[i] == "Adult",
HSI_sup$sup_fig[i] <- "Male",
ifelse(
HSI_sup$Stage[i] == "Gravid",
HSI_sup$sup_fig[i] <- "Female Gravid",
HSI_sup$sup_fig[i] <- "Female Non-Gravid")
)
print(i)
}
ggplot(HSI)sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(option = "D")
library(viridis)
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_fill_viridis(option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "A")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "B")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "C")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "E")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "F")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "G")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), size = 2) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), size = 10) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), size = 100) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() + theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() + theme_classic(size = 10) +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() + theme(size = 10) +
theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() +
labs(y = "HSI") + scale_color_viridis(discrete = TRUE, option = "D")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_fill_brewer(palette = "Dark2")
library(RColorBrewer)
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_fill_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_fill_brewer(palette = "Dark")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_fill_brewer(palette = "Dark2")
display.brewer.all(colorblindFriendly = TRUE)
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2") +
theme(legend.title = "")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2") +
theme(legend.title = NA)
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), lwd = 20, line = 10) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), lwd = 20) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), lwd = 200) + geom_boxplot() +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), lwd = 200) + geom_boxplot(lwd = 10) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig), lwd = 200) + geom_boxplot(lwd = 4) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot(lwd = 4) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot(lwd = 1) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2")
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot(lwd = 1) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2") +
theme(legend.title = elemetn_blank())
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot(lwd = 1) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2") +
theme(legend.title = element_blank())
ggplot(HSI_sup, aes(x=Season, y = H_S_I, colour = sup_fig)) + geom_boxplot(lwd = 1) +
theme_classic() + labs(y = "HSI") + scale_colour_brewer(palette = "Dark2") +
theme(legend.title = element_blank())
ggsave("Sup_Fig_Season.eps", width = 6, height = 6, units = c("in"), dpi = 900)
ggsave("Sup_Fig_Season.eps", width = 8, height = 6, units = c("in"), dpi = 900)
